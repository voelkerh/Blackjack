@startuml
actor Player

participant "BlackjackController\n(Rest Adapter)" as Controller
participant "BlackjackGameService\n(Application Service)" as Service
participant "BlackjackGame\n(Domain Model)" as Domain
participant "GameRepository\n(Port)" as RepoPort
participant "DatabaseGameRepository\n(Adapter)" as RepoAdapter
database "Game DB" as DB

== Start Game ==

Player -> Controller : POST /api/blackjack/play\n{ userId, bet }
Controller -> Service : startNewGame(userId, bet)
Service -> Domain : BlackjackGame.getGameSetup()
Domain --> Service : playersHand, dealersHand
Service -> RepoPort : createNewGameInstance(userId, bet, playersHand, dealersHand)
RepoPort -> RepoAdapter : createNewGame(playersHand, dealersHand)
RepoAdapter -> DB : INSERT game
DB --> RepoAdapter : gameId
RepoAdapter --> RepoPort : gameId
RepoPort --> Service : gameId
Service --> Controller : gameStateDto\n{ gameId, gameState }
Controller --> Player : 200 OK + full game state

== Perform Action (e.g., hit) ==

Player -> Controller : PATCH /api/blackjack/play/{gameId}\n{ action: "hit", gameState }
note right of Player : TODO: loop for players turn until bust or stand\n check if action is valid (status==playing) and return different response (405?)
Controller -> Service : performAction("hit", gameState)
Service -> Domain : game.hit()
Domain --> Service : updatedGame

Service -> Domain : game.isOver()
Domain --> Service : true or false

alt Game is over
    Service -> RepoPort : saveResult(gameResult)
    RepoPort -> RepoAdapter : save(gameResult)
    RepoAdapter -> DB : INSERT game result
    DB --> RepoAdapter
end

Service --> Controller : gameStateDto (new full state)
Controller --> Player : 200 OK + updated full game state

@enduml
