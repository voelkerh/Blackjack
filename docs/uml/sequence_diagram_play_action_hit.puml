@startuml
title API Endpoint /api/blackjack/play/{gameId}/hit

actor Player

participant "Controller\n(Rest Adapter)" as Controller
participant "PlayGameService\n(Use Case)" as Service
participant "PlayGame\n(Domain Logic)" as Domain
participant "JpaRepositoryAdapter\n(Outbound Port)" as Adapter
database PostgresSQL as DB

== Player Hits in Game ==

Player -> Controller : PATCH /api/blackjack/play/{gameId}/hit
Controller -> Service : hit(HitCommand)

Service -> Adapter : retrieveGame(gameId)
Adapter -> DB : SELECT * FROM game WHERE id = gameI

alt Game not found
    DB --> Adapter : throws EntityNotFoundException
    Adapter --> Service : Exception
    Service --> Controller : GAME_NOT_FOUND
    Controller --> Player : 404 Not Found + error message

else Game retrieved
DB --> Adapter : Game
Adapter --> Service : Game

    alt Game not in PLAYING state
        Service --> Controller : GAME_NOT_RUNNING
        Controller --> Player : 400 Bad Request + error message

    else Game is playable

        Service -> Domain : playPlayerTurn(game)
        Domain --> Service : Card drawn

        Service -> Adapter : saveCardDraw(gameId, Card, PLAYER)
        Adapter -> DB : INSERT INTO drawn_cards (...)
        DB --> Adapter
        Adapter --> Service

        Service -> Domain : isPlayerBusted(game)
        Domain --> Service : true or false

        alt Player is busted
            Service -> Domain : setGameState(LOST)
            Service -> Adapter : updateGameState(gameId, LOST)
            Adapter -> DB : Query to update game with new gameState
            DB --> Adapter
            Adapter --> Service
            Service --> Controller : Result.success(game)
            Controller --> Player : 200 OK + final game state (LOST)

        else Player is still in the game
            Service --> Controller : Result.success(game)
            Controller --> Player : 200 OK + updated game state (PLAYING)
        end
    end
end
@enduml
