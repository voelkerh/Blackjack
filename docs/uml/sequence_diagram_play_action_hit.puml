@startuml
title Perform Game Action â€“ Hit

actor Player

participant "Controller\n(Rest Adapter)" as Controller
participant "PerformAction\n(Use Case)" as UseCase
participant "GameService\n(Application Service)" as Service
participant "Game\n(Domain Model)" as Domain
participant "GameRepository\n(Port)" as RepoPort
participant "DatabaseGameRepository\n(Adapter)" as RepoAdapter
database "Game DB" as DB

== Perform Hit Action Request ==

Player -> Controller : PATCH /api/blackjack/play/{gameId}/hit\n{ userId, gameState }
Controller -> UseCase : handleAction(gameId, gameState)

alt gameState.status != "playing"
    UseCase --> Controller : 405 Method Not Allowed
    Controller --> Player : 405 Method Not Allowed

else active game
        UseCase -> Service : performAction(gameId, "hit", gameState)
        Service -> Domain : game.hit()
        Domain --> Service : updatedGameState

        Service -> Domain : game.checkPlayerBust()
        Domain --> Service : true or false

        alt Player is bust
            Service -> RepoPort : saveResult(gameId, result="lost")
            RepoPort -> RepoAdapter : save(gameId, result="lost")
            RepoAdapter -> DB : INSERT INTO game_result
            DB --> RepoAdapter
            Service --> UseCase : gameStateDto
            UseCase --> Controller : gameStateDto (status="lost")
            Controller --> Player : 200 OK + final game state
        end

        Service --> UseCase : updatedGameStateDto
        UseCase --> Controller : gameStateDto (status="playing")
        Controller --> Player : 200 OK + new game state

end
@enduml
