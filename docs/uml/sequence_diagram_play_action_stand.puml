@startuml
title API Endpoint /api/blackjack/play/{gameId}/stand

actor Player

participant "Controller\n(Rest Adapter)" as Controller
participant "PlayGameService\n(Use Case)" as Service
participant "PlayGame\n(Domain Logic)" as Domain
participant "JpaRepositoryAdapter\n(Outbound Port)" as Adapter
database PostgresSQL as DB

== Player Stands in Ongoing Game ==

Player -> Controller : PATCH /api/blackjack/play/{gameId}/stand
Controller -> Service : stand(StandCommand)

Service -> Adapter : retrieveGame(gameId)
Adapter -> DB : SELECT * FROM game WHERE id = gameId

alt Game not found

    DB --> Adapter : EntityNotFoundException
    Adapter --> Service : throws Exception
    Service --> Controller : GAME_NOT_FOUND
    Controller --> Player : 404 Not Found + error message

else Game retrieved
    DB --> Adapter : Game
    Adapter --> Service : Game

    alt Game state is not PLAYING
        Service --> Controller : GAME_NOT_RUNNING
        Controller --> Player : 400 Bad Request + error message

    else Game state is PLAYING

        Service -> Domain : playDealerTurn(game)
        Domain --> Service : List of drawn Cards

        loop Save each dealer card
            Service -> Adapter : saveCardDraw(gameId, Card, DEALER)
            Adapter -> DB : INSERT INTO drawn_cards(...)
            DB --> Adapter
        end

        Service -> Domain : determineResult(playerHand, dealerHand)
        Domain --> Service : result (GameState.WON/LOST/PUSH/BLACKJACK)

        Service -> Adapter : updateGameState(gameId, result)
        Adapter -> DB : Query to update gameState
        DB --> Adapter

        Service -> Adapter : retrieveGame(gameId)
        Adapter -> DB : SELECT * FROM game WHERE id = gameId
        DB --> Adapter : Updated Game
        Adapter --> Service : Updated Game

        Service --> Controller : Result.success(updatedGame)
        Controller --> Player : 200 OK + final game state
    end

end
@enduml
