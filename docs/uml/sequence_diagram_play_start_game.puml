@startuml
title API Endpoint /api/blackjack/play

actor Player

participant "Controller\n(Rest Adapter)" as Controller
participant "PlayGameService\n(Use Case)" as Service
participant "PlayGame\n(Domain Logic)" as Domain
participant "JpaRepositoryAdapter\n(Outbound Port)" as Adapter
database PostgresSQL as DB

== Start Game Request ==

Player -> Controller : POST /api/blackjack/play\n{ userId, bet }
Controller -> Service : startGame(StartGameCommand)

alt Invalid bet (<= 0)
    Service --> Controller : INVALID_BET_AMOUNT
    Controller --> Player : 400 Bad Request + error message

else Valid bet

    Service -> Domain : new GameImpl(null, userId, bet)
    Domain --> Service : Game

    Service -> Adapter : saveGame(Game)
    Adapter -> DB : INSERT INTO game (...)
    DB --> Adapter : gameId
    Adapter --> Service : savedGame

    Service -> Domain : handHasInitialBlackjack(playerHand)
    Domain --> Service : playerBJ (true/false)
    Service -> Domain : handHasInitialBlackjack(dealerHand)
    Domain --> Service : dealerBJ (true/false)

    alt Blackjack detected
        alt Both player and dealer have Blackjack
            Service -> Domain : setGameState(PUSH)
            Service -> Adapter : updateGameState(gameId, PUSH)

        else Only player has Blackjack
            Service -> Domain : setGameState(BLACKJACK)
            Service -> Adapter : updateGameState(gameId, BLACKJACK)

        else Only dealer has Blackjack
            Service -> Domain : setGameState(LOST)
            Service -> Adapter : updateGameState(gameId, LOST)
        end

        Adapter -> DB : Query to update GameState
        Service --> Controller : Result.success(savedGame)
        Controller --> Player : 200 OK + game with final state

    else No Blackjack
        Service --> Controller : Result.success(savedGame)
        Controller --> Player : 200 OK + game with ongoing state
    end

end
@enduml
