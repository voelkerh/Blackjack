@startuml
title Start New Game â€“ Sequence Diagram

actor Player

participant "BlackjackController\n(Rest Adapter)" as Controller
participant "StartGame\n(Use Case)" as UseCase
participant "BlackjackGameService\n(Application Service)" as Service
participant "BlackjackGame\n(Domain Model)" as Domain
participant "GameRepository\n(Port)" as RepoPort
participant "DatabaseGameRepository\n(Adapter)" as RepoAdapter
database "Game DB" as DB

== Start Game ==

Player -> Controller : POST /api/blackjack/play\n{ userId, bet }

Controller -> UseCase : handleStartGame(userId, bet)
UseCase -> Service : startNewGame(userId, bet)

Service -> Domain : BlackjackGame.getGameSetup()
Domain --> Service : playersHand, dealersHand

Service -> Domain : game.checkInitialBlackjack()
Domain --> Service : true or false

alt Blackjack detected
    Service -> Domain : game.getResult()
    Service -> RepoPort : saveResult(userId, bet, result)
    RepoPort -> RepoAdapter : save(result)
    RepoAdapter -> DB : INSERT game result
    Service --> Controller : gameStateDto (status=finished)
    Controller --> Player : 200 OK + game state with finished status

else No Blackjack


Service -> RepoPort : createNewGameInstance(userId, bet, playersHand, dealersHand)
RepoPort -> RepoAdapter : createNewGame(playersHand, dealersHand)
RepoAdapter -> DB : INSERT INTO game (userId, bet, playersHand, dealersHand)
DB --> RepoAdapter : gameId
RepoAdapter --> RepoPort : gameId
RepoPort --> Service : gameId

Service --> UseCase : gameStateDto { gameId, gameState }
UseCase --> Controller : gameStateDto { gameId, gameState }
Controller --> Player : 200 OK + full game state with gameId
end
@enduml
